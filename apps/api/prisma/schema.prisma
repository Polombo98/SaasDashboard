datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  name                      String?
  emailVerified             Boolean   @default(false)
  emailVerificationToken    String?
  emailVerificationExpires  DateTime?
  createdAt                 DateTime  @default(now())
  Member                    Member[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Team {
  id        String    @id @default(cuid())
  name      String
  members   Member[]
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Member {
  id     String @id @default(cuid())
  role   Role
  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  teamId      String
  team        Team          @relation(fields: [teamId], references: [id])
  apiKey      String        @unique
  createdAt   DateTime      @default(now())
  MetricEvent MetricEvent[]
}

enum MetricType {
  SIGNUP
  SUBSCRIPTION_START
  SUBSCRIPTION_CANCEL
  REVENUE
  ACTIVE
}

model MetricEvent {
  id         String     @id @default(cuid())
  projectId  String
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type       MetricType
  value      Float?
  userId     String?
  eventId    String? // client-provided id for idempotency (optional)
  occurredAt DateTime
  createdAt  DateTime   @default(now())

  @@unique([projectId, eventId])
  @@index([projectId, occurredAt])
}
